(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{1115:function(s,a,t){"use strict";t.r(a);var n=t(17),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"_1-谷粒商城-项目概述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-谷粒商城-项目概述"}},[s._v("#")]),s._v(" 1.谷粒商城-项目概述")]),s._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#_1-项目背景"}},[s._v("1.项目背景")]),n("ul",[n("li",[n("a",{attrs:{href:"#_1-1-电商模式"}},[s._v("1.1.电商模式")])]),n("li",[n("a",{attrs:{href:"#_1-2-谷粒商城"}},[s._v("1.2.谷粒商城")])])])]),n("li",[n("a",{attrs:{href:"#_2-项目架构图"}},[s._v("2.项目架构图")]),n("ul",[n("li",[n("a",{attrs:{href:"#_1-项目微服务架构图"}},[s._v("1.项目微服务架构图")])]),n("li",[n("a",{attrs:{href:"#_2-微服务划分图"}},[s._v("2.微服务划分图")])])])]),n("li",[n("a",{attrs:{href:"#_3-项目技术-特色"}},[s._v("3.项目技术&特色")])]),n("li",[n("a",{attrs:{href:"#_4-项目前置要求"}},[s._v("4.项目前置要求")])]),n("li",[n("a",{attrs:{href:"#_5-分布式基础概念"}},[s._v("5.分布式基础概念")]),n("ul",[n("li",[n("a",{attrs:{href:"#_5-1-微服务"}},[s._v("5.1.微服务")])]),n("li",[n("a",{attrs:{href:"#_5-2-集群-分布式-节点"}},[s._v("5.2.集群&分布式&节点")])]),n("li",[n("a",{attrs:{href:"#_5-3-远程调用"}},[s._v("5.3.远程调用")])]),n("li",[n("a",{attrs:{href:"#_5-4-负载均衡"}},[s._v("5.4.负载均衡")])]),n("li",[n("a",{attrs:{href:"#_5-5-服务注册发现-注册中心"}},[s._v("5.5.服务注册发现&注册中心")])]),n("li",[n("a",{attrs:{href:"#_5-6-配置中心"}},[s._v("5.6.配置中心")])]),n("li",[n("a",{attrs:{href:"#_5-7-服务熔断-服务降级"}},[s._v("5.7.服务熔断&服务降级")])]),n("li",[n("a",{attrs:{href:"#_5-8-api网关"}},[s._v("5.8.API网关")])])])])])]),n("p"),s._v(" "),n("h2",{attrs:{id:"_1-项目背景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-项目背景"}},[s._v("#")]),s._v(" 1.项目背景")]),s._v(" "),n("h3",{attrs:{id:"_1-1-电商模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-电商模式"}},[s._v("#")]),s._v(" 1.1.电商模式")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("市面上有 "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" 种常见的电商模式 B2B、B2C、C2B、C2C、O2O；\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、B2B 模式\nB2B "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Business to Business"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("， 是指商家与商家建立的商业关系。 如：阿里巴巴\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、B2C 模式\nB2C "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Business to Consumer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("， 就是我们经常看到的供应商直接把商品卖给用户，即“商对客” 模式，也就是通常说的商业零售，直接面向消费者销售产品和服务。如：苏宁易购、京东、\n天猫、小米商城\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、C2B 模式\nC2B "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Customer to Business"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("，即消费者对企业。先有消费者需求产生而后有企业生产，即先\n有消费者提出需求，后有生产企业按需求组织生产\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、C2C 模式\nC2C "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Customer to Consumer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ，客户之间自己把东西放上网去卖，如：淘宝，闲鱼\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("、O2O 模式\nO2O 即 Online To Offline，也即将线下商务的机会与互联网结合在了一起，让互联网成为线\n下交易的前台。线上快速支付，线下优质服务。如：饿了么，美团，淘票票，京东到家\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"_1-2-谷粒商城"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-谷粒商城"}},[s._v("#")]),s._v(" 1.2.谷粒商城")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("谷粒商城是一个 B2C 模式的电商平台，销售自营商品给客户。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h2",{attrs:{id:"_2-项目架构图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-项目架构图"}},[s._v("#")]),s._v(" 2.项目架构图")]),s._v(" "),n("h3",{attrs:{id:"_1-项目微服务架构图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-项目微服务架构图"}},[s._v("#")]),s._v(" 1.项目微服务架构图")]),s._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"在这里插入图片描述","data-src":t(585),loading:"lazy"}})]),s._v(" "),n("h3",{attrs:{id:"_2-微服务划分图"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-微服务划分图"}},[s._v("#")]),s._v(" 2.微服务划分图")]),s._v(" "),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"image-20221126140334264","data-src":t(586),loading:"lazy"}})]),s._v(" "),n("h2",{attrs:{id:"_3-项目技术-特色"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-项目技术-特色"}},[s._v("#")]),s._v(" 3.项目技术&特色")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v(" 前后分离开发，并开发基于 vue 的后台管理系统\n SpringCloud 全新的解决方案\n 应用监控、限流、网关、熔断降级等分布式方案 全方位涉及\n 透彻讲解分布式事务、分布式锁等分布式系统的难点\n 分析高并发场景的编码方式，线程池，异步编排等使用\n 压力测试与性能优化\n 各种集群技术的区别以及使用\n CI/CD 使用\n "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("h2",{attrs:{id:"_4-项目前置要求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-项目前置要求"}},[s._v("#")]),s._v(" 4.项目前置要求")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("学习项目的前置知识\n 熟悉 SpringBoot 以及常见整合方案\n 了解 SpringCloud\n 熟悉 git，maven\n 熟悉 linux，redis，docker 基本操作\n 了解 html，css，js，vue\n 熟练使用 idea 开发项目\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h2",{attrs:{id:"_5-分布式基础概念"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-分布式基础概念"}},[s._v("#")]),s._v(" 5.分布式基础概念")]),s._v(" "),n("h3",{attrs:{id:"_5-1-微服务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-微服务"}},[s._v("#")]),s._v(" 5.1.微服务")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("微服务架构风格，就像是把一个单独的应用程序开发为一套小服务，每个小服务运行在自\n己的进程中，并使用轻量级机制通信，通常是 HTTP API。这些服务围绕业务能力来构建，\n并通过完全自动化部署机制来独立部署。这些服务使用不同的编程语言书写，以及不同数据\n存储技术，并保持最低限度的集中式管理。\n简而言之：拒绝大型单体应用，基于业务边界进行服务微化拆分，各个服务独立部署运行。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"_5-2-集群-分布式-节点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-集群-分布式-节点"}},[s._v("#")]),s._v(" 5.2.集群&分布式&节点")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("集群是个物理形态，分布式是个工作方式。\n只要是一堆机器，就可以叫集群，他们是不是一起协作着干活，这个谁也不知道；\n《分布式系统原理与范型》定义：\n“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”\n分布式系统（distributed system）是建立在网络之上的软件系统。\n分布式是指将不同的业务分布在不同的地方。\n集群指的是将几台服务器集中在一起，实现同一业务。\n例如：京东是一个分布式系统，众多业务运行在不同的机器，所有业务构成一个大型的业\n务集群。每一个小的业务，比如用户系统，访问压力大的时候一台服务器是不够的。我们就\n应该将用户系统部署到多个服务器，也就是每一个业务系统也可以做集群化；\n分布式中的每一个节点，都可以做集群。 而集群并不一定就是分布式的。\n节点：集群中的一个服务器\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h3",{attrs:{id:"_5-3-远程调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-远程调用"}},[s._v("#")]),s._v(" 5.3.远程调用")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("在分布式系统中，各个服务可能处于不同主机，但是服务之间不可避免的需要互相调用，我\n们称为远程调用。\nSpringCloud 中使用 HTTP+JSON 的方式完成远程调用\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"image-20221126140825289","data-src":t(587),loading:"lazy"}})]),s._v(" "),n("h3",{attrs:{id:"_5-4-负载均衡"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-负载均衡"}},[s._v("#")]),s._v(" 5.4.负载均衡")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("分布式系统中，A 服务需要调用 B 服务，B 服务在多台机器中都存在，A 调用任意一个\n服务器均可完成功能。\n为了使每一个服务器都不要太忙或者太闲，我们可以负载均衡的调用每一个服务器，提\n升网站的健壮性。\n常见的负载均衡算法：\n轮询：为第一个请求选择健康池中的第一个后端服务器，然后按顺序往后依次选择，直\n到最后一个，然后循环。\n最小连接：优先选择连接数最少，也就是压力最小的后端服务器，在会话较长的情况下\n可以考虑采取这种方式。\n散列：根据请求源的 IP 的散列（hash）来选择要转发的服务器。这种方式可以一定程\n度上保证特定用户能连接到相同的服务器。如果你的应用需要处理状态而要求用户能连接到\n和之前相同的服务器，可以考虑采取这种方式。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"image-20221126140924060","data-src":t(588),loading:"lazy"}})]),s._v(" "),n("h3",{attrs:{id:"_5-5-服务注册发现-注册中心"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-服务注册发现-注册中心"}},[s._v("#")]),s._v(" 5.5.服务注册发现&注册中心")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("A 服务调用 B 服务，A 服务并不知道 B 服务当前在哪几台服务器有，哪些正常的，哪些服务\n已经下线。解决这个问题可以引入注册中心；\n如果某些服务下线，我们其他人可以实时的感知到其他服务的状态，从而避免调用不可用的\n服务\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"image-20221126141037189","data-src":t(589),loading:"lazy"}})]),s._v(" "),n("h3",{attrs:{id:"_5-6-配置中心"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-配置中心"}},[s._v("#")]),s._v(" 5.6.配置中心")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("每一个服务最终都有大量的配置，并且每个服务都可能部署在多台机器上。我们经常需要变\n更配置，我们可以让每个服务在配置中心获取自己的配置。\n配置中心用来集中管理微服务的配置信息\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"image-20221126141131873","data-src":t(590),loading:"lazy"}})]),s._v(" "),n("h3",{attrs:{id:"_5-7-服务熔断-服务降级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-服务熔断-服务降级"}},[s._v("#")]),s._v(" 5.7.服务熔断&服务降级")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("在微服务架构中，微服务之间通过网络进行通信，存在相互依赖，当其中一个服务不可用时，\n有可能会造成雪崩效应。要防止这样的情况，必须要有容错机制来保护服务。\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("）、服务熔断\na. 设置服务的超时，当被调用的服务经常失败到达某个阈值，我们可以开\n启断路保护机制，后来的请求不再去调用这个服务。本地直接返回默认\n的数据\n"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("）、服务降级\na. 在运维期间，当系统处于高峰期，系统资源紧张，我们可以让非核心业\n务降级运行。降级：某些服务不处理，或者简单处理【抛异常、返回 NULL、\n调用 Mock 数据、调用 Fallback 处理逻辑】。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"image-20221126141225818","data-src":t(591),loading:"lazy"}})]),s._v(" "),n("h3",{attrs:{id:"_5-8-api网关"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-8-api网关"}},[s._v("#")]),s._v(" 5.8.API网关")]),s._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[s._v("在微服务架构中，API Gateway 作为整体架构的重要组件，它抽象了微服务中都需要的公共\n功能，同时提供了客户端负载均衡，服务自动熔断，灰度发布，统一认证，限流流控，日\n志统计等丰富的功能，帮助我们解决很多 API 管理难题。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[n("img",{staticClass:"lazy",attrs:{alt:"image-20221126141331830","data-src":t(592),loading:"lazy"}})])])}),[],!1,null,null,null);a.default=e.exports},585:function(s,a,t){s.exports=t.p+"assets/img/2020123018263834.c1c13af5.jpg"},586:function(s,a,t){s.exports=t.p+"assets/img/image-20221126140334264.db08b203.png"},587:function(s,a,t){s.exports=t.p+"assets/img/image-20221126140825289.514b459c.png"},588:function(s,a,t){s.exports=t.p+"assets/img/image-20221126140924060.458558a4.png"},589:function(s,a,t){s.exports=t.p+"assets/img/image-20221126141037189.f21c4b56.png"},590:function(s,a,t){s.exports=t.p+"assets/img/image-20221126141131873.1f524bf4.png"},591:function(s,a,t){s.exports=t.p+"assets/img/image-20221126141225818.7e9cdb63.png"},592:function(s,a,t){s.exports=t.p+"assets/img/image-20221126141331830.3afaa542.png"}}]);