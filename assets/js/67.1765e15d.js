(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{1382:function(t,s,_){"use strict";_.r(s);var a=_(17),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_1-单点登录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-单点登录"}},[t._v("#")]),t._v(" 1.单点登录")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.bilibili.com/video/BV14M4y1c7Jm/?spm_id_from=333.999.0.0&vd_source=eddfd6cf09bd51f4b0abf93d76184fef",target:"_blank",rel:"noopener noreferrer"}},[t._v("学习视频地址"),a("OutboundLink")],1)]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#_1-单点登录介绍"}},[t._v("1.单点登录介绍")])]),a("li",[a("a",{attrs:{href:"#_2-session跨域"}},[t._v("2.Session跨域")])]),a("li",[a("a",{attrs:{href:"#_3-spring-session共享-了解"}},[t._v("3.Spring Session共享 了解")])]),a("li",[a("a",{attrs:{href:"#_4-nginx-session共享"}},[t._v("4.Nginx Session共享")])]),a("li",[a("a",{attrs:{href:"#_5-token机制"}},[t._v("5.Token机制")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-传统身份认证"}},[t._v("1.传统身份认证")])]),a("li",[a("a",{attrs:{href:"#_2-token身份认证"}},[t._v("2.Token身份认证")])])])]),a("li",[a("a",{attrs:{href:"#_6-json-web-token-jwt-机制"}},[t._v("6.JSON Web Token（JWT）机制")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-jwt数据结构"}},[t._v("1.JWT数据结构")])]),a("li",[a("a",{attrs:{href:"#_2-jwt执行流程"}},[t._v("2.JWT执行流程")])])])]),a("li",[a("a",{attrs:{href:"#_7-基于jwt机制的单点登录"}},[t._v("7.基于JWT机制的单点登录")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-实现"}},[t._v("1.实现")])]),a("li",[a("a",{attrs:{href:"#_2-注意"}},[t._v("2.注意")])]),a("li",[a("a",{attrs:{href:"#_3-token保存位置"}},[t._v("3.token保存位置")])]),a("li",[a("a",{attrs:{href:"#_4-webstorage"}},[t._v("4.webstorage")])])])]),a("li",[a("a",{attrs:{href:"#_8-restful接口设计"}},[t._v("8.Restful接口设计")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-rest简述"}},[t._v("1.Rest简述")])]),a("li",[a("a",{attrs:{href:"#_2-restful简述"}},[t._v("2.Restful简述")])]),a("li",[a("a",{attrs:{href:"#_3-restful特性"}},[t._v("3.Restful特性")])]),a("li",[a("a",{attrs:{href:"#_4-springmvc使用restful实例"}},[t._v("4.SpringMVC使用Restful实例")])])])]),a("li",[a("a",{attrs:{href:"#_9-接口安全机制"}},[t._v("9.接口安全机制")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-安全机制的设计方案"}},[t._v("1.安全机制的设计方案")])]),a("li",[a("a",{attrs:{href:"#_2-des加密"}},[t._v("2.DES加密")])]),a("li",[a("a",{attrs:{href:"#_3-aes加密"}},[t._v("3.AES加密")])]),a("li",[a("a",{attrs:{href:"#_4-使用场景"}},[t._v("4.使用场景")])]),a("li",[a("a",{attrs:{href:"#_5-对比"}},[t._v("5.对比")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"_1-单点登录介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-单点登录介绍"}},[t._v("#")]),t._v(" 1.单点登录介绍")]),t._v(" "),a("p",[t._v("多系统，单一位置登录，实现多系统同时登录的一种技术。")]),t._v(" "),a("p",[t._v("常出现在互联网应用和企业级平台中。")]),t._v(" "),a("p",[t._v("如：京东。")]),t._v(" "),a("p",[t._v("单点登录一般是用于互相授信的系统，实现单一位置登录，全系统有效的。")]),t._v(" "),a("p",[t._v("三方登录：某系统，使用其他系统的用户，实现本系统登录的方式。如，在京东中使用微信登录。解决信息孤岛和用户不对等的实现方案。")]),t._v(" "),a("h2",{attrs:{id:"_2-session跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-session跨域"}},[t._v("#")]),t._v(" 2.Session跨域")]),t._v(" "),a("p",[t._v("所谓Session跨域就是摒弃了系统（Tomcat）提供的Session，而使用自定义的类似Session的机制来保存客户端数据的一种解决方案。")]),t._v(" "),a("p",[t._v("如：通过设置cookie的domain来实现cookie的跨域传递。在cookie中传递一个自定义的session_id。这个session_id是客户端的唯一标记。将这个标记作为key，将客户端需要保存的数据作为value，在服务端进行保存（数据库保存或NoSQL保存）。这种机制就是Session的跨域解决。")]),t._v(" "),a("p",[t._v("什么跨域： 客户端请求的时候，请求的服务器，不是同一个IP，端口，域名，主机名的时候，都称为跨域。")]),t._v(" "),a("p",[t._v("什么是域：在应用模型，一个完整的，有独立访问路径的功能集合称为一个域。如：百度称为一个应用或系统。百度下有若干的域，如：搜索引擎（www.baidu.com），百度贴吧（tie.baidu.com），百度知道（zhidao.baidu.com），百度地图（map.baidu.com）等。域信息，有时也称为多级域名。域的划分： 以IP，端口，域名，主机名为标准，实现划分。")]),t._v(" "),a("p",[t._v("localhost / 127.0.0.1")]),t._v(" "),a("p",[t._v("使用cookie跨域共享，是session跨域的一种解决方案。")]),t._v(" "),a("p",[t._v("jsessionid是和servlet绑定的httpsession的唯一标记。")]),t._v(" "),a("p",[t._v('cookie应用 - new Cookie("", "").')]),t._v(" "),a("p",[t._v("request.getCookies() -> cookie[] -> 迭代找到需要使用的cookie")]),t._v(" "),a("p",[t._v("response.addCookie().")]),t._v(" "),a("p",[t._v("cookie.setDomain() - 为cookie设定有效域范围。")]),t._v(" "),a("p",[t._v("cookie.setPath() - 为cookie设定有效URI范围。")]),t._v(" "),a("h2",{attrs:{id:"_3-spring-session共享-了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-spring-session共享-了解"}},[t._v("#")]),t._v(" 3.Spring Session共享 了解")]),t._v(" "),a("p",[t._v("spring-session技术是spring提供的用于处理集群会话共享的解决方案。spring-session技术是将用户session数据保存到三方存储容器中，如：mysql，redis等。")]),t._v(" "),a("p",[t._v("Spring-session技术是解决同域名下的多服务器集群session共享问题的。不能解决跨域session共享问题。")]),t._v(" "),a("p",[t._v("使用： 配置一个Spring提供的Filter，实现数据的拦截保存，并转换为spring-session需要的会话对象。必须提供一个数据库的表格信息（由spring-session提供，找spring-session-jdbc.jar/org/springframework/session/jdbc/*.sql,根据具体的数据库找对应的SQL文件，做表格的创建）。")]),t._v(" "),a("p",[t._v("spring-session表：保存客户端session对象的表格。")]),t._v(" "),a("p",[t._v("spring-session-attributes表：保存客户端session中的attributes属性数据的表格。")]),t._v(" "),a("p",[t._v("spring-session框架，是结合Servlet技术中的HTTPSession完成的会话共享机制。在代码中是直接操作HttpSession对象的。")]),t._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:_(876),alt:"img"}}),t._v(" "),a("h2",{attrs:{id:"_4-nginx-session共享"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-nginx-session共享"}},[t._v("#")]),t._v(" 4.Nginx Session共享")]),t._v(" "),a("p",[t._v("做反向代理服务器，可以为反向代理的服务器集群做集群管理和负载均衡。")]),t._v(" "),a("p",[t._v("正向代理： 对客户端已知，对服务端透明的代理应用，称为正向代理。如：翻墙软件。")]),t._v(" "),a("p",[t._v("反向代理： 对服务端已知，对客户端透明的代理应用，称为反向代理。如：nginx")]),t._v(" "),a("p",[t._v("Nginx服务器一旦安装，一般提供7*24小时服务。建议安装在服务器中（如：Unix、Linux）")]),t._v(" "),a("p",[t._v("Nginx是一个C语言开发的应用服务器。可以提供的服务有：静态WEB服务（Apache http server），邮件代理服务器，虚拟主机，反向代理服务器。")]),t._v(" "),a("p",[t._v("Nginx应用体积非常的小，对CPU和内存的要求也很低。且对负载能力有非常好的体现。核心功能是应用自主开发，很多的附属功能都是借助其他的应用实现的，如：SSL协议的解析-opensll，perl库（正则）的解析-perl包实现。")]),t._v(" "),a("p",[t._v("Nginx安装成功后，在安装位置有三个目录。sbin/conf/html。 sbin是可执行文件，html是nginx提供的默认静态页面，conf是配置文件目录。")]),t._v(" "),a("p",[t._v("nginx中的ip_hash技术能够将某个ip的请求定向到同一台后端，这样一来这个ip下的某个客户端和某个后端就能建立起稳固的session，ip_hash是在upstream配置中定义的，具体如下")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("upstream nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v(" weight "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("808")]),t._v(" weight "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    ip_hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nserver\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    location "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        proxy_pass\n        http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("nginx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("example"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proxy_set_header "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Host")]),t._v("  $http_host"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proxy_set_header "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cookie")]),t._v(" $http_cookie"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proxy_set_header "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("X")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Real")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("IP $remote_addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proxy_set_header "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("X")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Forwarded")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("For")]),t._v(" $proxy_add_x_forwarded_for"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        proxy_set_header "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("X")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Forwarded")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proto")]),t._v(" $scheme"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        client_max_body_size  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br")])]),a("p",[t._v("ip_hash是容易理解的，但是因为仅仅能用ip这个因子来分配后端，因此ip_hash是有缺陷的，不能在一些情况下使用：")]),t._v(" "),a("p",[t._v("nginx不是最前端的服务器。")]),t._v(" "),a("p",[t._v("ip_hash要求nginx一定是最前端的服务器，否则nginx得不到正确ip，就不能根据ip作hash。譬如使用的是squid为最前端，那么nginx取ip时只能得到squid的服务器ip地址，用这个地址来作分流是肯定错乱的。")]),t._v(" "),a("p",[t._v("nginx的后端还有其它方式的负载均衡。")]),t._v(" "),a("p",[t._v("假如nginx后端又有其它负载均衡，将请求又通过另外的方式分流了，那么某个客户端的请求肯定不能定位到同一台session应用服务器上。")]),t._v(" "),a("h2",{attrs:{id:"_5-token机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-token机制"}},[t._v("#")]),t._v(" 5.Token机制")]),t._v(" "),a("h3",{attrs:{id:"_1-传统身份认证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-传统身份认证"}},[t._v("#")]),t._v(" 1.传统身份认证")]),t._v(" "),a("p",[t._v("HTTP 是一种没有状态的协议，也就是它并不知道是谁是访问应用。这里我们把用户看成是客户端，客户端使用用户名还有密码通过了身份验证，不过下回这个客户端再发送请求时候，还得再验证一下。")]),t._v(" "),a("p",[t._v("解决的方法就是，当用户请求登录的时候，如果没有问题，我们在服务端生成一条记录，这个记录里可以说明一下登录的用户是谁，然后把这条记录的 ID 号发送给客户端，客户端收到以后把这个 ID 号存储在 Cookie 里，下次这个用户再向服务端发送请求的时候，可以带着这个 Cookie ，这样服务端会验证一个这个 Cookie 里的信息，看看能不能在服务端这里找到对应的记录，如果可以，说明用户已经通过了身份验证，就把用户请求的数据返回给客户端。")]),t._v(" "),a("p",[t._v("上面说的就是 Session，我们需要在服务端存储为登录的用户生成的 Session ，这些 Session 可能会存储在内存，磁盘，或者数据库里。我们可能需要在服务端定期的去清理过期的 Session 。")]),t._v(" "),a("p",[t._v("这种认证中出现的问题是：")]),t._v(" "),a("p",[t._v("Session：每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。")]),t._v(" "),a("p",[t._v("可扩展性：在服务端的内存中使用Session存储登录信息，伴随而来的是可扩展性问题。")]),t._v(" "),a("p",[t._v("CORS(跨域资源共享)：当我们需要让数据跨多台移动设备上使用时，跨域资源的共享会是一个让人头疼的问题。在使用Ajax抓取另一个域的资源，就可以会出现禁止请求的情况。")]),t._v(" "),a("p",[t._v("CSRF(跨站请求伪造)：用户在访问银行网站时，他们很容易受到跨站请求伪造的攻击，并且能够被利用其访问其他的网站。")]),t._v(" "),a("p",[t._v("在这些问题中，"),a("strong",[t._v("可扩展性是最突出的")]),t._v("。因此我们有必要去寻求一种更有行之有效的方法。")]),t._v(" "),a("h3",{attrs:{id:"_2-token身份认证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-token身份认证"}},[t._v("#")]),t._v(" 2.Token身份认证")]),t._v(" "),a("p",[t._v("使用基于 Token 的身份验证方法，在服务端不需要存储用户的登录记录。大概的流程是这样的：")]),t._v(" "),a("p",[t._v("客户端使用用户名、密码请求登录")]),t._v(" "),a("p",[t._v("服务端收到请求，去验证用户名、密码")]),t._v(" "),a("p",[t._v("验证成功后，服务端会签发一个 Token，再把这个 Token 发送给客户端")]),t._v(" "),a("p",[t._v("客户端收到 Token 以后可以把它存储起来，比如放在 Cookie 里或者 Local Storage 、Session Storage里")]),t._v(" "),a("p",[t._v("客户端每次向服务端请求资源的时候需要带着服务端签发的 Token")]),t._v(" "),a("p",[t._v("服务端收到请求，然后去验证客户端请求里面带着的 Token，如果验证成功，就向客户端返回请求的数据")]),t._v(" "),a("p",[t._v("使用Token验证的优势：")]),t._v(" "),a("p",[t._v("无状态、可扩展")]),t._v(" "),a("p",[t._v("在客户端存储的Tokens是无状态的，并且能够被扩展。基于这种无状态和不存储Session信息，负载负载均衡器能够将用户信息从一个服务传到其他服务器上。")]),t._v(" "),a("p",[t._v("安全性")]),t._v(" "),a("p",[t._v("请求中发送token而不再是发送cookie能够防止CSRF(跨站请求伪造)。即使在客户端使用cookie存储token，cookie也仅仅是一个存储机制而不是用于认证。不将信息存储在Session中，让我们少了对session操作。")]),t._v(" "),a("h2",{attrs:{id:"_6-json-web-token-jwt-机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-json-web-token-jwt-机制"}},[t._v("#")]),t._v(" 6.JSON Web Token（JWT）机制")]),t._v(" "),a("p",[t._v("JWT是一种****"),a("em",[t._v("紧凑*")]),t._v("*"),a("strong",[t._v("且")]),t._v("**"),a("em",[t._v("自包含*")]),t._v("***的，用于在多方传递JSON对象的技术。传递的数据可以使用数字签名增加其安全行。可以使用HMAC加密算法或RSA公钥/私钥加密方式。")]),t._v(" "),a("p",[t._v("紧凑：数据小，可以通过URL，POST参数，请求头发送。且数据小代表传输速度快。")]),t._v(" "),a("p",[t._v("自包含：使用payload数据块记录用户必要且不隐私的数据，可以有效的减少数据库访问次数，提高代码性能。")]),t._v(" "),a("p",[t._v("JWT一般用于处理****"),a("em",[t._v("用户身份验证*")]),t._v("*"),a("strong",[t._v("或")]),t._v("**"),a("em",[t._v("数据信息交换*")]),t._v("***。")]),t._v(" "),a("p",[t._v("用户身份验证：一旦用户登录，每个后续请求都将包含JWT，允许用户访问该令牌允许的路由，服务和资源。单点登录是当今广泛使用JWT的一项功能，因为它的开销很小，并且能够轻松地跨不同域使用。")]),t._v(" "),a("p",[t._v("数据信息交换：JWT是一种非常方便的多方传递数据的载体，因为其可以使用数据签名来保证数据的有效性和安全性。")]),t._v(" "),a("p",[t._v("官网： jwt.io")]),t._v(" "),a("h3",{attrs:{id:"_1-jwt数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-jwt数据结构"}},[t._v("#")]),t._v(" 1.JWT数据结构")]),t._v(" "),a("p",[t._v("JWT的数据结构是 ： A.B.C。 由字符点‘.’来分隔三部分数据。")]),t._v(" "),a("p",[t._v("A - header 头信息")]),t._v(" "),a("p",[t._v("B - payload （有效荷载？）")]),t._v(" "),a("p",[t._v("C - Signature 签名")]),t._v(" "),a("h4",{attrs:{id:"_1-1-header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-header"}},[t._v("#")]),t._v(" 1.1.header")]),t._v(" "),a("p",[t._v("数据结构： {“alg”: “加密算法名称”, “typ” : “JWT”}")]),t._v(" "),a("p",[t._v("alg是加密算法定义内容，如：HMAC SHA256 或 RSA")]),t._v(" "),a("p",[t._v("typ是token类型，这里固定为JWT。")]),t._v(" "),a("h4",{attrs:{id:"_1-2-payload"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-payload"}},[t._v("#")]),t._v(" 1.2.payload")]),t._v(" "),a("p",[t._v("在payload数据块中一般用于记录实体（通常为用户信息）或其他数据的。主要分为三个部分，分别是：已注册信息（registered claims），公开数据（public claims），私有数据（private claims）。")]),t._v(" "),a("p",[t._v("payload中常用信息有：iss（发行者），exp（到期时间），sub（主题），aud（受众）"),a("a",{attrs:{href:"#section-4.1"}},[t._v("等")]),t._v("。前面列举的都是已注册信息。")]),t._v(" "),a("p",[t._v("公开数据部分一般都会在JWT注册表中增加定义。避免和已注册信息冲突。")]),t._v(" "),a("p",[t._v("公开数据和私有数据可以由程序员任意定义。")]),t._v(" "),a("p",[t._v("*"),a("strong",[t._v("*"),a("em",[t._v("注意：即使JWT有签名加密机制，但是payload内容都是明文记录，除非记录的是加密数据，否则不排除泄露隐私数据的可能。不推荐在payload中记录任何敏感数据。*")]),t._v("*")])]),t._v(" "),a("h4",{attrs:{id:"_1-3-signature"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-signature"}},[t._v("#")]),t._v(" 1.3.Signature")]),t._v(" "),a("p",[t._v("签名信息。这是一个由开发者提供的信息。是服务器验证的传递的数据是否有效安全的标准。在生成JWT最终数据的之前。先使用header中定义的加密算法，将header和payload进行加密，并使用点进行连接。如：加密后的head.加密后的payload。再使用相同的加密算法，对加密后的数据和签名信息进行加密。得到最终结果。")]),t._v(" "),a("h3",{attrs:{id:"_2-jwt执行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-jwt执行流程"}},[t._v("#")]),t._v(" 2.JWT执行流程")]),t._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"assets/wps2.jpg",loading:"lazy"}})]),t._v(" "),a("h2",{attrs:{id:"_7-基于jwt机制的单点登录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-基于jwt机制的单点登录"}},[t._v("#")]),t._v(" 7.基于JWT机制的单点登录")]),t._v(" "),a("h3",{attrs:{id:"_1-实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-实现"}},[t._v("#")]),t._v(" 1.实现")]),t._v(" "),a("p",[t._v("详见代码")]),t._v(" "),a("h3",{attrs:{id:"_2-注意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-注意"}},[t._v("#")]),t._v(" 2.注意")]),t._v(" "),a("p",[t._v("使用JWT实现单点登录时，需要注意token时效性。token是保存在客户端的令牌数据，如果永久有效，则有被劫持的可能。token在设计的时候，可以考虑一次性有效或一段时间内有效。如果设置有效时长，则需要考虑是否需要刷新token有效期问题。")]),t._v(" "),a("h3",{attrs:{id:"_3-token保存位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-token保存位置"}},[t._v("#")]),t._v(" 3.token保存位置")]),t._v(" "),a("p",[t._v("使用JWT技术生成的token，客户端在保存的时候可以考虑cookie或localStorage。cookie保存方式，可以实现跨域传递数据。localStorage是域私有的本地存储，无法实现跨域。")]),t._v(" "),a("h3",{attrs:{id:"_4-webstorage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-webstorage"}},[t._v("#")]),t._v(" 4.webstorage")]),t._v(" "),a("p",[t._v("webstorage可保存的数据容量为****"),a("em",[t._v("5M*")]),t._v("*"),a("strong",[t._v("。且只能存储")]),t._v("**"),a("em",[t._v("字符串数据*")]),t._v("***。")]),t._v(" "),a("p",[t._v("webstorage分为localStorage和sessionStorage。")]),t._v(" "),a("p",[t._v("localStorage的****"),a("em",[t._v("生命周期是永久的*")]),t._v("***，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。")]),t._v(" "),a("p",[t._v("sessionStorage是会话相关的本地存储单元，*"),a("strong",[t._v("*"),a("em",[t._v("生命周期是在仅在当前会话下有效*")]),t._v("*")]),t._v("。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。")]),t._v(" "),a("h2",{attrs:{id:"_8-restful接口设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-restful接口设计"}},[t._v("#")]),t._v(" 8.Restful接口设计")]),t._v(" "),a("h3",{attrs:{id:"_1-rest简述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-rest简述"}},[t._v("#")]),t._v(" 1.Rest简述")]),t._v(" "),a("p",[t._v("REST（英文：Representational State Transfer，简称REST）描述了一个架构样式的网络系统，比如 web 应用程序。它首次出现在 2000 年 Roy Fielding 的博士论文中，他是 HTTP 规范的主要编写者之一。在目前主流的三种Web服务交互方案中，REST相比于SOAP（Simple Object Access protocol，简单对象访问协议）以及XML-RPC更加简单明了，无论是对URL的处理还是对Payload的编码，REST都倾向于用更加简单轻量的方法设计和实现。值得注意的是REST并没有一个明确的标准，而更像是一种设计的风格。")]),t._v(" "),a("h3",{attrs:{id:"_2-restful简述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-restful简述"}},[t._v("#")]),t._v(" 2.Restful简述")]),t._v(" "),a("p",[t._v("对应的中文是rest式的;Restful web service是一种常见的rest的应用,是遵守了rest风格的web服务;rest式的web服务是一种ROA(The Resource-Oriented Architecture)(面向资源的架构).")]),t._v(" "),a("h3",{attrs:{id:"_3-restful特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-restful特性"}},[t._v("#")]),t._v(" 3.Restful特性")]),t._v(" "),a("h4",{attrs:{id:"_3-1-普通架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-普通架构"}},[t._v("#")]),t._v(" 3.1.普通架构")]),t._v(" "),a("p",[t._v("每次请求的接口或者地址,都在做描述，例如查询的时候用了query，新增的时候用了save。如：")]),t._v(" "),a("p",[t._v("http://127.0.0.1/user/query/1  GET 根据用户id查询用户数据")]),t._v(" "),a("p",[t._v("http://127.0.0.1/user/save  POST 新增用户")]),t._v(" "),a("h4",{attrs:{id:"_3-2-restful架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-restful架构"}},[t._v("#")]),t._v(" 3.2.Restful架构")]),t._v(" "),a("p",[t._v("使用get请求,就是查询.使用post请求，就是新增的请求，意图明显，没有必要做描述,这就是restful。")]),t._v(" "),a("p",[t._v("http://127.0.0.1/user/1  GET 根据用户id查询用户数据")]),t._v(" "),a("p",[t._v("http://127.0.0.1/user  POST 新增用户")]),t._v(" "),a("h4",{attrs:{id:"_3-3-restful操作方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-restful操作方式"}},[t._v("#")]),t._v(" 3.3.Restful操作方式")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("HTTP方法")]),t._v(" "),a("th",[t._v("资源操作")]),t._v(" "),a("th",[t._v("幂等性")]),t._v(" "),a("th",[t._v("是否安全")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("GET")]),t._v(" "),a("td",[t._v("查询")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("是")])]),t._v(" "),a("tr",[a("td",[t._v("POST")]),t._v(" "),a("td",[t._v("新增")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("否")])]),t._v(" "),a("tr",[a("td",[t._v("PUT")]),t._v(" "),a("td",[t._v("修改")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("否")])]),t._v(" "),a("tr",[a("td",[t._v("DELETE")]),t._v(" "),a("td",[t._v("删除")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("否")])])])]),t._v(" "),a("p",[a("strong",[t._v("幂等性：多次访问，结果资源状态是否相同")])]),t._v(" "),a("p",[a("strong",[t._v("安全：访问是否会变更服务器资源状态")])]),t._v(" "),a("h4",{attrs:{id:"_3-4-响应状态码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-响应状态码"}},[t._v("#")]),t._v(" 3.4.响应状态码")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("编码")]),t._v(" "),a("th",[t._v("HTTP方法")]),t._v(" "),a("th",[t._v("响应体内容")]),t._v(" "),a("th",[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("200")]),t._v(" "),a("td",[t._v("get/put")]),t._v(" "),a("td",[t._v("资源数据")]),t._v(" "),a("td",[t._v("操作成功")])]),t._v(" "),a("tr",[a("td",[t._v("201")]),t._v(" "),a("td",[t._v("post")]),t._v(" "),a("td",[t._v("源数据")]),t._v(" "),a("td",[t._v("创建成功")])]),t._v(" "),a("tr",[a("td",[t._v("202")]),t._v(" "),a("td",[t._v("post/put/delete")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("请求已接受")])]),t._v(" "),a("tr",[a("td",[t._v("204")]),t._v(" "),a("td",[t._v("delete/put")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("请求已处理，无返回数据")])]),t._v(" "),a("tr",[a("td",[t._v("301")]),t._v(" "),a("td",[t._v("get")]),t._v(" "),a("td",[t._v("link 链接")]),t._v(" "),a("td",[t._v("资源已被移除")])]),t._v(" "),a("tr",[a("td",[t._v("303")]),t._v(" "),a("td",[t._v("get")]),t._v(" "),a("td",[t._v("link")]),t._v(" "),a("td",[t._v("重定向")])]),t._v(" "),a("tr",[a("td",[t._v("304")]),t._v(" "),a("td",[t._v("get")]),t._v(" "),a("td",[t._v("无")]),t._v(" "),a("td",[t._v("资源没有被修改")])]),t._v(" "),a("tr",[a("td",[t._v("400")]),t._v(" "),a("td",[t._v("get/post/put/delete")]),t._v(" "),a("td",[t._v("错误提示消息")]),t._v(" "),a("td",[t._v("参数错误（缺少，格式错误等）")])]),t._v(" "),a("tr",[a("td",[t._v("401")]),t._v(" "),a("td",[t._v("get/post/put/delete")]),t._v(" "),a("td",[t._v("错误提示消息")]),t._v(" "),a("td",[t._v("未授权")])]),t._v(" "),a("tr",[a("td",[t._v("403")]),t._v(" "),a("td",[t._v("get/post/put/delete")]),t._v(" "),a("td",[t._v("错误提示消息")]),t._v(" "),a("td",[t._v("访问受限、授权过期")])]),t._v(" "),a("tr",[a("td",[t._v("404")]),t._v(" "),a("td",[t._v("get/post/put/delete")]),t._v(" "),a("td",[t._v("错误提示消息")]),t._v(" "),a("td",[t._v("资源、服务未找到")])]),t._v(" "),a("tr",[a("td",[t._v("405")]),t._v(" "),a("td",[t._v("get/post/put/delete")]),t._v(" "),a("td",[t._v("错误提示消息")]),t._v(" "),a("td",[t._v("不允许的HTTP方法")])]),t._v(" "),a("tr",[a("td",[t._v("409")]),t._v(" "),a("td",[t._v("get/post/put/delete")]),t._v(" "),a("td",[t._v("错误提示消息")]),t._v(" "),a("td",[t._v("资源冲突或资源被锁定")])]),t._v(" "),a("tr",[a("td",[t._v("415")]),t._v(" "),a("td",[t._v("get/post/put/delete")]),t._v(" "),a("td",[t._v("错误提示消息")]),t._v(" "),a("td",[t._v("不支持的数据类型或媒体类型")])]),t._v(" "),a("tr",[a("td",[t._v("429")]),t._v(" "),a("td",[t._v("get/post/put/delete")]),t._v(" "),a("td",[t._v("错误提示消息")]),t._v(" "),a("td",[t._v("请求过多被限制")])]),t._v(" "),a("tr",[a("td",[t._v("500")]),t._v(" "),a("td",[t._v("get/post/put/delete")]),t._v(" "),a("td",[t._v("错误提示消息")]),t._v(" "),a("td",[t._v("系统错误")])]),t._v(" "),a("tr",[a("td",[t._v("501")]),t._v(" "),a("td",[t._v("get/post/put/delete")]),t._v(" "),a("td",[t._v("错误提示消息")]),t._v(" "),a("td",[t._v("接口未实现")])])])]),t._v(" "),a("h3",{attrs:{id:"_4-springmvc使用restful实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-springmvc使用restful实例"}},[t._v("#")]),t._v(" 4.SpringMVC使用Restful实例")]),t._v(" "),a("p",[t._v("详见代码")]),t._v(" "),a("h2",{attrs:{id:"_9-接口安全机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-接口安全机制"}},[t._v("#")]),t._v(" 9.接口安全机制")]),t._v(" "),a("p",[t._v("在对外发布服务接口的时候，定制一套签名机制，保证数据传递有效性的。")]),t._v(" "),a("h3",{attrs:{id:"_1-安全机制的设计方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-安全机制的设计方案"}},[t._v("#")]),t._v(" 1.安全机制的设计方案")]),t._v(" "),a("h4",{attrs:{id:"_1-1-单向加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-单向加密"}},[t._v("#")]),t._v(" 1.1.单向加密")]),t._v(" "),a("p",[t._v("在理论上，从明文加密到密文后，不可反向解密的。")]),t._v(" "),a("p",[t._v("可以从迭代和加盐的方式尽可能保证加密数据不可反向解密。")]),t._v(" "),a("p",[t._v("传递敏感数据的时候使用的。如：密码。")]),t._v(" "),a("p",[t._v("在金融相关交易中，用户密码是敏感数据，其他数据是非敏感数据。所有的金融相关的应用中，客户端都有一个独立的密码输入控件。这个控件就是做单向加密的。")]),t._v(" "),a("p",[t._v("使用单向加密的时候，传递的数据只有密文，没有明文，也没有密钥。")]),t._v(" "),a("h4",{attrs:{id:"_1-2-双向加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-双向加密"}},[t._v("#")]),t._v(" 1.2.双向加密")]),t._v(" "),a("p",[t._v("是可以实现加密和解密双向运算的算法。需要通过密钥实现加解密计算的。")]),t._v(" "),a("p",[t._v("密钥种类：公钥、私钥。")]),t._v(" "),a("p",[t._v("公钥：可以对外公开的，就是可以在网络中传递的。")]),t._v(" "),a("p",[t._v("私钥：必须保密的，绝对不会对外暴露的。")]),t._v(" "),a("p",[t._v("在传递安全数据的时候使用。所谓安全数据，就是不可篡改的数据。如：金融交易中的收款人卡号，转账的金额，货币的种类等。")]),t._v(" "),a("p",[t._v("使用双向加密的时候，传递的有明文，密文，公钥。")]),t._v(" "),a("h5",{attrs:{id:"_1-2-1-对称加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-对称加密"}},[t._v("#")]),t._v(" 1.2.1.对称加密")]),t._v(" "),a("p",[t._v("只有一个密钥，就是公钥。")]),t._v(" "),a("h5",{attrs:{id:"_1-2-2-非对称加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-非对称加密"}},[t._v("#")]),t._v(" 1.2.2.非对称加密")]),t._v(" "),a("p",[t._v("有两个密钥，公钥和私钥。")]),t._v(" "),a("h3",{attrs:{id:"_2-des加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-des加密"}},[t._v("#")]),t._v(" 2.DES加密")]),t._v(" "),a("p",[t._v("详见代码")]),t._v(" "),a("p",[t._v("DES的密文是非定长密文。根据明文数据和key数据动态伸缩的。")]),t._v(" "),a("h3",{attrs:{id:"_3-aes加密"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-aes加密"}},[t._v("#")]),t._v(" 3.AES加密")]),t._v(" "),a("p",[t._v("详见代码")]),t._v(" "),a("p",[t._v("AES的key要求长度为16。")]),t._v(" "),a("h3",{attrs:{id:"_4-使用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-使用场景"}},[t._v("#")]),t._v(" 4.使用场景")]),t._v(" "),a("p",[t._v("DES和AES在使用场景上没有区别。")]),t._v(" "),a("p",[t._v("传递非敏感的安全性数据可以使用。如：QQ通讯录获取，微信中的消息传递。")]),t._v(" "),a("h3",{attrs:{id:"_5-对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-对比"}},[t._v("#")]),t._v(" 5.对比")]),t._v(" "),a("p",[t._v("DES - 加密后的数据是16的整数倍。 是16字节整数倍。")]),t._v(" "),a("p",[t._v("AES - 要求key的长度必须是16字节。 AES相对效率较低，但是可以通过偏移量强化加密。")])])}),[],!1,null,null,null);s.default=e.exports},876:function(t,s,_){t.exports=_.p+"assets/img/wps1.f56db198.png"}}]);